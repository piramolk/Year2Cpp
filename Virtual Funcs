#include <iostream>
#include <string>

using namespace std;

//----------------------------------------------------------------------
// class Point
//----------------------------------------------------------------------

class Point
{
protected:
	double x;
	double y;
public:
	Point();
	Point(double x_in, double y_in);
	Point(const Point& pt_in);
	~Point();

	Point& operator=(const Point& pt_in);
	Point operator-();
	
	double get_x() {return x;};
	double get_y() {return y;};
	
	void set_x(double x_in) {x = x_in;};
	void set_y(double y_in) {y = y_in;};
	
	virtual void print();
	
	
	
};

//----------------------------------------------------------------------
// essential functions: constructors, copy assignment, destructor

Point::Point()
{
	cout << "Point:: default constructor" << endl;
	x = 0.0;
	y = 0.0;
}

Point::Point(double x_in, double y_in)
{
	cout << "Point:: constructor x,y arguments" << endl;
	x = x_in;
	y = y_in;
}

Point::Point(const Point& pt_in)
{
	cout << "Point:: copy constructor" << endl;
	x = pt_in.x;
	y = pt_in.y;
}

Point& Point::operator=(const Point& pt_in)
{
	cout << "Point:: copy assignment" << endl;
	x = pt_in.x;
	y = pt_in.y;
	
	return *this;
}

Point::~Point()
{
	cout << "Point:: destructor" << endl;
}

//----------------------------------------------------------------------

Point Point::operator-()
{
	Point pt_ret;
	pt_ret.x = -x;
	pt_ret.y = -y;
	return pt_ret;
}

void Point::print()
{
	cout << "(" << x << "," << y << ")" << endl;
}

//----------------------------------------------------------------------
// functions associated with class Point

ostream& operator<<(ostream& os, Point pt1)
{
	return os << "(" << pt1.get_x() << "," << pt1.get_y() << ")";
}

Point operator+(Point pt1, Point pt2)
{
	Point pt_ret;
	pt_ret.set_x(pt1.get_x() + pt2.get_x());
	pt_ret.set_y(pt1.get_y() + pt2.get_y());
	return pt_ret;
}

bool operator==(Point pt1, Point pt2)
{
	if ((pt1.get_x() == pt2.get_y()) && (pt1.get_x() == pt2.get_y()))
		return true;
	else
		return false;
}


//----------------------------------------------------------------------
// class Rectangle
//----------------------------------------------------------------------

class Rectangle : public Point
{
private:
	double w;
	double h;
public:
	Rectangle();
	Rectangle(double x_in, double y_in, double w_in, double h_in);
	Rectangle(const Rectangle& rect_in);
	~Rectangle();

	Rectangle& operator=(const Rectangle& rect_in);
	Rectangle operator-();

	double get_w() {return w;};
	double get_h() {return h;};
	void set_w(double w_in) {w = w_in;};
	void set_h(double h_in) {h = h_in;};
	
	void print();
};

//----------------------------------------------------------------------

Rectangle::Rectangle():Point()
{
	cout << "Rectangle:: default constructor" << endl;
	w = 0.0;
	h = 0.0;
}

Rectangle::Rectangle(double x_in, double y_in, double w_in, double h_in):Point(x_in, y_in)
{
	cout << "Rectangle:: constructor with four arguments" << endl;
	w = w_in;
	h = h_in;
}

Rectangle::Rectangle(const Rectangle& rect_in)
{
	cout << "Rectangle:: copy constructor" << endl;
	x = rect_in.x;
	y = rect_in.y;
	w = rect_in.w;
	h = rect_in.h;
}

Rectangle& Rectangle::operator=(const Rectangle& rect_in)
{
	cout << "Rectangle:: copy assignment" << endl;
	x = rect_in.x;
	y = rect_in.y;
	w = rect_in.w;
	h = rect_in.h;
	return *this;
}

Rectangle Rectangle::operator-()
{
	Rectangle rect_ret(*this);
	rect_ret.x = -x;
	rect_ret.y = -y;
	return rect_ret;
}

Rectangle::~Rectangle()
{
	cout << "Rectangle:: destructor" << endl;
}

//----------------------------------------------------------------------

void Rectangle::print()
{
	cout << "(" << x << "," << y << "," << w << "," << h << ")" << endl;
}

//----------------------------------------------------------------------
// functions associated with class Rectangle

ostream& operator<<(ostream& os, Rectangle pt1)
{
	return os << "(" << pt1.get_x() << "," << pt1.get_y()
			  << "," << pt1.get_w() << "," << pt1.get_h() << ")";
}

//----------------------------------------------------------------------
// functions and operators related to class Point
//----------------------------------------------------------------------



//----------------------------------------------------------------------
// int main()
//----------------------------------------------------------------------

int main()
{
	Point origin(0,0);			// requires constructors
	Point pt1(1,3);
	Point pt2(2,5);
	Point pt3;
	Point pt4 = pt2;			// requires copy assignment
	
	origin.print();
	pt1.print();
	pt2.print();

	pt3 = pt1 + pt2;			// requires an operation overload of +
	pt3.print();
	
	cout << origin << endl;		// requires an operation overload of <<
	cout << pt1 << endl;
	cout << pt2 << endl;
	cout << -pt3 << endl;
	
	if (pt1 == pt2)				// requires an operation overload of ==
	{
		cout << "Point 1 is equal to Point 2" << endl;
	}

	if (pt2 == pt4)
	{
		cout << "Point 2 is equal to Point 4" << endl;
	}
	
	Rectangle rect1;			// requires constructors
	Rectangle rect2(0, 0, 1, 1);
	Rectangle rect3(2, 3, 7, 5);
	Rectangle rect4 = rect3;	// requires copy assignment
	
	rect4.print();
	cout << rect1 << endl;
	cout << rect2 << endl;
	cout << rect3 << endl;
	cout << rect4 << endl;
	
	Point* p_bs;
	Point* p_dr;
	
	p_bs = &pt4;
	p_dr = &rect4;
	
	p_bs->print();
	p_dr->print();		// requires virtual function to work properly
						// try with and without the virtual keyword

	Point& r_bs = pt4;
	Point& r_dr = rect4;
	
	r_bs.print();
	r_dr.print();

	return 0;
}
