 /* the member value val
should be of a type specified by the programmer using a template and should work
with type int or double. Two functions (Database( â€¦ )) are constructors.
setName(), setID(), and setVal() should set the member values according to the
input parameter. getName(), getID(), and getVal() should return their respective
member values. print() should display all the member values.
*/

#include <iostream>
#include <string>

using namespace std;

template <typename T>
class Database
{
	private:
	string name;
	int id;
	T val;
	
	public:
	Database();
	Database(string name_in, int id_in, T val_in);
	void setName(string name_in);
	void setID(int id_in);
	void setVal(T val_in);
	string getName();
	int getID();
	T getVal();
	void print();
};

template <typename T>
Database<T>::Database()
{
	name = "";
	id=0;
	val=0; 
}

template <typename T>
Database<T>::Database(string name_in, int id_in, T val_in)
{
	name=name_in;
	id=id_in;
	val=val_in; 
}

template <typename T>
string Database<T>::getName()
{	
	return name;
}

template <typename T>
int Database<T>::getID()
{	
	return id;
}

template <typename T>
void Database<T>::setName(string name_in)
{
	name=name_in;
}

template <typename T>
void Database<T>::setID(int id_in)
{
	id=id_in;
}

template <typename T>
void Database<T>::setVal(T val_in)
{
	val=val_in; 	
}

template <typename T>
T Database<T>::getVal()
{
	return val; 
}

template <typename T>
void Database<T>::print()
{
	cout<<"Name: "<< name << " ID: "<< id<< " Value: "<< val<<endl;

}


int main()
{
	Database<int> data1;
	Database<int> data2("triangle", 15, 68);
	Database<double> data3("square", 12, 12.7123);
	data1.print();
	data2.print();
	data3.print();
	data1.setName("circle");
	data1.setID(3);
	data1.setVal(12);
	data1.print();
	data2.print();
	data3.print();
	cout<<"Name: "<<data3.getName()<<", ID: "<< data3.getID()
	<<", val: "<<data3.getVal()<<endl;
	return 0;
}
